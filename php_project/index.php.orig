<?php

// <editor-fold defaultstate="collapsed" desc="Setup Session & Logger">
session_start();

require_once 'vendor/autoload.php';

use Monolog\Logger;
use Monolog\Handler\StreamHandler;

// create a log channel
$log = new Logger('main');
$log->pushHandler(new StreamHandler('logs/everything.log', Logger::DEBUG));
$log->pushHandler(new StreamHandler('logs/errors.log', Logger::ERROR));
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Configure Database Connection">
//DB::debugMode();

if (false) {
    DB::$user = 'bootstore';
    DB::$dbName = 'bootstore';
    DB::$password = 'vuxunjqTbm5S7sAq';
    DB::$port = 3333;
    DB::$host = 'localhost';
    DB::$encoding = 'utf8';
    DB::$error_handler = 'db_error_handler';
} else {
    DB::$user = 'bootstore';
    DB::$dbName = 'bootstore';
    DB::$password = 'vuxunjqTbm5S7sAq';
    DB::$port = 3306;
    DB::$host = 'localhost';
    DB::$encoding = 'utf8';
    DB::$error_handler = 'db_error_handler';
}

// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Configure Error-Handler">
function db_error_handler($params) {
    global $app, $log;
    $log->error("SQL error: " . $params['error']);
    $log->error("SQL query: " . $params['query']);
    http_response_code(500);
    $app->render('fatal_error.html.twig');
    die; // don't want to keep going if a query broke
}

// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Slim creation and setup">
$app = new \Slim\Slim(array(
    'view' => new \Slim\Views\Twig()
        ));

$view = $app->view();
$view->parserOptions = array(
    'debug' => true,
    'cache' => dirname(__FILE__) . '/cache'
);
$view->setTemplatesDirectory(dirname(__FILE__) . '/templates');
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Add User and Session to superglobals">
if (!isset($_SESSION['userId'])) {
    $_SESSION['userId'] = array();
}

if (!isset($_SESSION['sessionId'])) {
    $_SESSION['sessionId'] = session_id();
}

$twig = $app->view()->getEnvironment();
$twig->addGlobal('global_userId', $_SESSION['userId']);
$twig->addGlobal('global_sessionId', $_SESSION['sessionId']);
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Run Index Page (GET)">
$app->get('/', function() use ($app, $log) {
    $sessionID = session_id();

    //Get all todos from DB
    $books = DB::query("SELECT * FROM items");

    // -----------------debugging --------------------
//    var_dump($sessionID); // debugging
//    echo '<hr />';
//    var_dump($books);
//    echo '<hr />';
    // -----------------debugging --------------------
    //Pass todos to index HTML as array of todos
    $app->render('index.html.twig', array(
        'sessionID' => $sessionID,
        'books' => $books));
});
// </editor-fold>
// <editor-fold desc="Index Page (GET)">
$app->get('/', function() use ($app, $log) {
    $books = DB::query("SELECT * FROM items");

    $app->render('index.html.twig', array('books' => $books));
});
// </editor-fold>
// <editor-fold desc="Index Page (with CRITERIA)">
//<<<<<<< HEAD
$app->get('scott/:criteria1/:criteria2/:criteria3', function(
        $criteria1 = 'all',
        $criteria2 = 'null',
        $criteria3 = 'null') use ($app, $log) {
    switch ($criteria1) {
        case("all"): {
                $books = DB::query("SELECT * FROM items");
            }
        case("new"): {
//Does nothing as the items have no timestamp
                $books = DB::query("SELECT * FROM items");
            }
        case("below10"): {
                $books = DB::query("SELECT * FROM items WHERE price < 10.00");
            }
        case("greater99"): {
                $books = DB::query("SELECT * FROM items WHERE price > 99.99");
            }
        case("author"): {
                $books = DB::query("SELECT * FROM items WHERE author=%s", $criteria2);
            }


//Need alot more...       
    }
//=======
$app->get('/:criteria1/:criteria2/:criteria3', function(
        $criteria1 = 'all', 
        $criteria2 = 'null', 
        $criteria3 = 'null') use ($app, $log) 
{
    switch ($criteria1)
    {
        case("all"):
        {
            $books = DB::query("SELECT * FROM items");
        }
        case("new"):
        {
            //Does nothing as the items have no timestamp
            $books = DB::query("SELECT * FROM items");
        }
        case("below10"):
        {
            $books = DB::query("SELECT * FROM items WHERE price < 10.00");
        }
        case("greater99"):
        {
            $books = DB::query("SELECT * FROM items WHERE price > 99.99");
        }
        case("author"):
        {
            $books = DB::query("SELECT * FROM items WHERE author=%s", $criteria2);
        }
        
        
        //Need alot more...       
    }    
>>>>>>> d1d4c74305841eebefd0098a9b3cf7866100087e
    $app->render('index.html.twig', array('books' => $books));
});
// </editor-fold>
// <editor-fold desc="Login Page (GET)">
=======
// 
// <editor-fold desc="/list/page/classid">
$app->get('/list/:classCode/:page', function($page = 1, $classCode = -1) use ($app, $log) {
    $pageSize = 5;
    if (strlen($classCode) == 3) {
        //TODO: jump pages
        $books = DB::query("SELECT * FROM items where DeweyDecimalClass = $classCode");
    } else {
        $books = DB::query("SELECT * FROM items ");
    }

    $app->render('index.html.twig', array(
        'books' => $books,
        'page' => $page,
        'DeweyDecimalClass' => $classCode
    ));
});
// </editor-fold>
// <editor-fold desc="Login Page">
>>>>>>> 8536842622e9bdd798f92b831edaa86cad9fa0e7
$app->get('/login', function() use ($app, $log) {
    //  No Check on userId needed, if user is already 
    //  logged in they can change accounts by logging in.
    $app->render('login.html.twig');
// </editor-fold> 
// <editor-fold desc="Login Page (POST)">
$app->post('/login', function() use ($app, $log) 
{
    $email = $app->request()->post('email');
    $password = $app->request()->post('password');
    $user = DB::queryFirstRow("SELECT * FROM users WHERE email=%s", $email);
    
    if ($user && ($user['password'] == $password)) 
    {
        $_SESSION['userId'] = $user['id'];
        $app->render('index.html.twig');
    }
    else 
    { 
        $app->render('login.html.twig', array('error' => true));
    }
});
// </editor-fold> 
// <editor-fold desc="Logout Page">
$app->get('/logout', function() use ($app, $log) {
    if ($_SESSION['userId']) {
        $_SESSION['userId'] = array();
        $app->render('logout.html.twig');
    } else {
        $log->addAlert('Unregistered user tried to LOGOUT');
        $app->render('index.html.twig');
    }
});
// </editor-fold> 
// <editor-fold desc="Cart Page">
$app->get('/cart', function() use ($app, $log) {
    if ($_SESSION['userId']) {
        $items = DB::query(""
                        . "SELECT * "
                        . "FROM cartitems "
                        . "INNER JOIN items "
                        . "ON cartitems.itemId=items.id "
                        . "WHERE cartitems.userId=%s "
                        . "ORDER BY cartitems.createdTS ASC", $_SESSION['userId']);
    } else {
        $items = DB::query(""
                        . "SELECT * "
                        . "FROM cartitems "
                        . "INNER JOIN items "
                        . "ON cartitems.itemId=items.id "
                        . "WHERE cartitems.sessionId=%s "
                        . "ORDER BY cartitems.createdTS ASC", $_SESSION['sessionId']);
    }

    $app->render('cart.html.twig', array('items' => $items));
});
// </editor-fold> 
// <editor-fold desc="Transaction History Page">
$app->get('/transactionhistory', function() use ($app, $log) {
    if ($_SESSION['userId']) {
        $items = DB::query(""
                        . "SELECT * "
                        . "FROM orderitems "
                        . "INNER JOIN orders "
                        . "ON orderitems.orderId=orders.id "
                        . "WHERE orders.userId=%s", $_SESSION['userId']);
        //If we add a timestamp to the orders we can return the
        //transacrion history in chroniclogical order with
        //"ORDER BY orders.timestamp ASC"
        $app->render('transactionhistory.html.twig', array('items' => $items));
    } else {
        $log->addAlert('Unregistered user tried to Access TRANSACTION HISTORY');
        $app->render('index.html.twig');
    }
});
// </editor-fold>
// <editor-fold desc="Sell History Page">
$app->get('/sellhistory', function() use ($app, $log) {
    if ($_SESSION['userId']) {
        $items = DB::query("SELECT * FROM items WHERE sellerId=%s", $_SESSION['userId']);
        $app->render('sellhistory.html.twig', array('items' => $items));
    } else {
        $log->addAlert('Unregistered user tried to Access SALES HISTORY');
        $app->render('index.html.twig');
    }
});
// </editor-fold> 
// <editor-fold desc="Sell Page (GET)">
$app->get('/sell', function() use ($app, $log) {
    if ($_SESSION['userId']) {
        $app->render('sell.html.twig');
    } else {
        $log->addAlert('Unregistered user tried to Access SELL');
        $app->render('index.html.twig');
    }
});
// </editor-fold> 
// <editor-fold desc="Sell Page (POST)">
$app->post('/sell', function() use ($app, $log)
{
    $title = $app->request()->post('title');
    $description = $app->request()->post('description');
    $conditionofused = $app->request()->post('conditionofused');
    $author = $app->request()->post('author');
    $ISBN = $app->request()->post('ISBN');
    $price = $app->request()->post('price');
    $DeweyDecimalClass = $app->request()->post('DeweyDecimalClass');
    $type1 = $app->request()->post('type1');
    $type2 = $app->request()->post('type2');
    $type3 = $app->request()->post('type3');

    $imageDir = $app->request()->post('image');

    $errorList = array();

    if (!$errorList)
    {
        DB::insert('items', array(
            'title' => $title,
            'image' =>  $imageDir,
            'description' => $description,
            'conditionofused' => $conditionofused,
            'author' => $author,
            'ISBN' => $ISBN,
            'price' => $price,
            'DeweyDecimalClass' => $DeweyDecimalClass,
            'type1' => $type1,
            'isFrontPage' => 0,
            'type2' => $type2,
            'type3' => $type3,
            'sellerId' => $_SESSION['userId']));    
        
        //Or go to the Item.html.twig for the newly added item?
        $app->render('item_add_success.html.twig');
    }
    else 
    {
        $app->render('item_add_success.html.twig', array('errors' => errorList));
    }   
});
// </editor-fold> 
// <editor-fold desc="Registration Page (GET)">
$app->get('/register', function() use ($app, $log) {
    //  No Check on userId needed, if user is already 
    //  logged in they can register a new account.   
    $app->render('register.html.twig');
});
// </editor-fold> 
// <editor-fold desc="Registration Page (POST)">
$app->get('/register', function() use ($app, $log) 
{
    $email = $app->request()->post('title');
    $password1 = $app->request()->post('description');
    $password2 = $app->request()->post('author');
    
    $errorList = array();
    
    //
    //error checking    
    //  
    
    if (!$errorList)
    {
        DB::insert('users', array(
            'email' => $email,
            'password' =>  $password,
            'isAdmin' => 0));

        $_SESSION['userId'] = DB::insertId();
        $app->render('login.html.twig');
    }
    else 
    {
        $app->render('register.html.twig', array('errors' => errorList));
    }
});
// </editor-fold> 


// <editor-fold defaultstate="collapsed" desc="/item/addtocart/:id Page (POST)">
$app->post('/item/addtocart/:itemId', function($itemId) use ($app, $log) {
    // validate parameters
    $item = DB::query("SELECT id FROM items WHERE id=%d", $itemId);
    if (!$item) {
        echo $itemId . "not found";
        return;
    }
    $sessionID = session_id();
//    if ($_SESSION['userId']) {
//        echo "Please login first.";
//        return;
//    }
//TODO: use rollback();
    DB::startTransaction();
    DB::insert('cartitems', array(
        'userid' => 1,
        'itemId' => $itemId,
        'sessionId' => $sessionID
    ));
    $counter = DB::affectedRows();
//    DB::delete('items', "id=%i", $itemId);
    if ($counter == 1) {
        echo $counter . " book added to the cart.";
        DB::commit();
    } else {
        echo "No book added to the cart.\n";
        DB::rollback();
    }

    echo $itemId . 'add to cart successfully';
});
// <editor-fold defaultstate="collapsed" desc="Run admin/item/add Page (GET POST)">
$app->get('/admin/item/:action(/:id)', function($action, $id = -1) use ($app, $log) {
    // validate parameters
    if (($action == 'add' && $id != -1) || ($action == 'edit' && $id == -1)) {
        $app->notFound();
        return;
    }
    // stage 1 get form
    if ($action == 'edit') {
        $item = DB::queryFirstRow("SELECT * FROM items WHERE id=%i", $id);
        if (!$item) {
            $app->notFound();
            return;
        }
        $log->debug("preparing to edit item with id=" . $id);
        $app->render('item_addedit.html.twig', array(
            'action' => 'edit',
            'v' => $item)
        );
    } else {
        $app->render('item_addedit.html.twig', array('action' => 'add'));
    }
});
$app->post('/admin/item/:action(/:id)', function($action, $id = -1) use ($app, $log) {
    if (($action == 'add' && $id != -1) || ($action == 'edit' && $id == -1)) {
        $app->notFound();
        return;
    }
<<<<<<< HEAD

// -----------------debugging --------------------
//    var_dump($_SESSION['user']);
//    var_dump($_FILES);
//    echo '<hr />';
//    var_dump($_POST);
//    echo '<hr />';
// -----------------debugging --------------------
// 
=======
    // -----------------debugging --------------------
    var_dump($_SESSION['user']);
    var_dump($_FILES);
    echo '<hr />';
    var_dump($_POST);
    echo '<hr />';
    // -----------------debugging --------------------
    // 
>>>>>>> d1d4c74305841eebefd0098a9b3cf7866100087e
    $id = $app->request()->post('id');
    $title = $app->request()->post('title');
    $author = $app->request()->post('author');
    $isbn = $app->request()->post('isbn');
    $description = $app->request()->post('description');
    $condition = $app->request()->post('condition');
    $bookclass = $app->request()->post('bookclass');
    $price = $app->request()->post('price');
    $imageData = null;
    $mimeType = null;
    $valueList = array(
        'id' => $id,
        'title' => $title,
        'author' => $author,
        'isbn' => $isbn,
        'price' => $price,
        'condition' => $condition,
        'bookclass' => $bookclass,
        'description' => $description,
        'image' => $imageData,
        'mimeType' => $mimeType
    );

    //
    $errorList = array();
    if (strlen($title) < 2 || strlen($title) > 200) {
        array_push($errorList, "Title($title) must be 2-200 characters long");
    }
    if (strlen($author) < 2 || strlen($author) > 100) {
        array_push($errorList, "Author($author) must be 2-100 characters long");
    }
    if (strlen($isbn) < 2 || strlen($isbn) > 30) {
        array_push($errorList, "ISBN($isbn) invalid");
    }
    if (strlen($description) < 20 || strlen($description) > 2000) {
        array_push($errorList, "Description must be 20-2000 characters long");
    }
    if ($condition < 40 || $condition > 100) {
        array_push($errorList, "Condition($condition) must be 40-100");
    }
    if (!is_numeric($price) || $price <= 0 || $price > 999.99) {
        array_push($errorList, "Price($price) invalid");
    }
    if (strlen($bookclass) != 3) {
        array_push($errorList, "Book class($bookclass) invalid");
    }


    // 
    if ($_FILES['image']['size'] == 0) {
        array_push($errorList, "Image is empty");
    } else {
        $image = $_FILES['image'];
        $imageInfo = getimagesize($image['tmp_name']);
        if (!$imageInfo) {
            array_push($errorList, "File does not look like a valid image");
        } else {
            // never allow '..' in the file name
            if (strstr($image['name'], '..')) {
                array_push($errorList, "File name invalid");
            }
            // only allow select extensions
            $ext = strtolower(pathinfo($image['name'], PATHINFO_EXTENSION));
            if (!in_array($ext, array('jpg', 'jpeg', 'gif', 'png'))) {
                array_push($errorList, "File extension invalid");
            }
            // check mime-type submitted
            //$mimeType = $image['type']; // TODO: use getimagesize result mime-type instead
            $mimeType = $imageInfo['mime'];
            if (!in_array($mimeType, array('image/gif', 'image/jpeg', 'image/jpg', 'image/png'))) {
                array_push($errorList, "File type invalid");
            }

            // 
            $imageData = file_get_contents($image['tmp_name']);
            $valueList['image'] = $imageData;
            $valueList['mimeType'] = $mimeType;
        }
    }

    //
    if ($errorList) {
        $app->render('item_addedit.html.twig', array(
            'v' => $valueList, 'errorList' => $errorList));
    } else {
//        echo "post-list: <br>";
//        var_dump(array(
//            'id' => $id,
//            'title' => $title,
//            'author' => $author,
//            'ISBN' => $isbn,
//            'description' => $description,
//            'DeweyDecimalClass' => $bookclass,
//            'conditionofused' => $condition,
//            'price' => $price,            
//            'mimeType' => $mimeType,
//            'image' => $imageData,
//                )
//        );
//        return;
        DB::insert('items', array(
            'id' => $id,
            'title' => $title,
            'author' => $author,
            'ISBN' => $isbn,
            'description' => $description,
            'DeweyDecimalClass' => $bookclass,
            'conditionofused' => $condition,
            'price' => $price,
            'mimeType' => $mimeType,
            'image' => $imageData,
        ));
        $itemId = DB::insertId();
        $app->render('item_add_success.html.twig', array('itemId' => $itemId));
    }
<<<<<<< HEAD
});
//        ->conditions(array('action' => '(add|edit)', 'id' => '[0-9]+'));
// </editor-fold> 
// <editor-fold desc="Run /item/:id/image (GET)">
=======
})->conditions(array('action' => '(add|edit)', 'id' => '[0-9]+'));
// <editor-fold defaultstate="collapsed" desc="Run /item/:id/image (GET)">
>>>>>>> d1d4c74305841eebefd0098a9b3cf7866100087e
$app->get('/item/:id/image', function($id) use ($app, $log) {
    $item = DB::queryFirstRow("SELECT mimeType, image FROM items WHERE id=%i", $id);
    if (!$item) {
        $app->notFound();
        return;
    }
//    header('Content-Type: image/jpeg');
//    var_dump($item);    
//    return;
    $app->response()->header('Content-Type', $item['mimeType']);
    echo $item['image'];
});

// <editor-fold defaultstate="collapsed" desc="Run /item/:code/class (GET)">
$app->get('/item/:code/class', function($code) use ($app, $log) {

    switch (strlen($code)) {
        case 1:
            $codelikeStr = $code . '%0';
            $querStr = "SELECT code, name FROM classes WHERE code LIKE '$codelikeStr' ORDER BY code";
            $results = DB::query($querStr);
            break;
        case 2:
            $codelikeStr = $code . '%';
            $querStr = "SELECT code, name FROM classes WHERE code LIKE '$codelikeStr' ORDER BY code";
            $results = DB::query($querStr);
            break;
        default:
            $codelikeStr = '%00';
            $querStr = "SELECT code, name FROM classes WHERE code LIKE '$codelikeStr' ORDER BY code";
            $results = DB::query($querStr);
            break;
    }
//    var_dump($results);
    // <option value="{{ c.code }}">{{ c.name }}</option>
    $isFirstOption = true;
    foreach ($results as $row) {
        if ($isFirstOption) {
            $isFirstOption = false;
//            echo "<option value='000' selected>Choose...</option>";
            echo "<option value='" . $row['code'] . "'>";
            echo $row['name'] . "</option>\n";
        } else {
            echo "<option value='" . $row['code'] . "'>";
            echo $row['name'] . "</option>\n";
        }
    }
});
// <editor-fold defaultstate="collapsed" desc="Run /item/:code/class (GET)">
$app->get('/item/:code/classStr', function($code) use ($app, $log) {
    $results = array();
    switch (strlen($code)) {
        case 1:
            $codelikeStr = $code . '00';
            $querStr = "SELECT code, name FROM classes WHERE code LIKE '$codelikeStr'";
            array_push($results, DB::query($querStr));
            break;
        case 2:
            $codelikeStr = substr($code, 0, 1) . '00';
            $querStr = "SELECT code, name FROM classes WHERE code LIKE '$codelikeStr'";
            array_push($results, DB::query($querStr));
            $codelikeStr = substr($code, 0, 2) . '0';
            $querStr = "SELECT code, name FROM classes WHERE code LIKE '$codelikeStr'";
            array_push($results, DB::query($querStr));
            break;
        default:
            $codelikeStr = substr($code, 0, 1) . '00';
            $querStr = "SELECT code, name FROM classes WHERE code LIKE '$codelikeStr'";
            array_push($results, DB::query($querStr));
            $codelikeStr = substr($code, 0, 2) . '0';
            $querStr = "SELECT code, name FROM classes WHERE code LIKE '$codelikeStr'";
            array_push($results, DB::query($querStr));
            $querStr = "SELECT code, name FROM classes WHERE code LIKE '$code'";
            array_push($results, DB::query($querStr));
            break;
    }
    var_dump($results);
    return;
    echo $restult;
});

// <editor-fold defaultstate="collapsed" desc="Run /test (GET)">
$app->get('/test', function() use ($app, $log) {
    var_dump($_SESSION);
});

// <editor-fold defaultstate="collapsed" desc="user-description">
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="user-description">
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="MeekroDB Actions">

/*
  //INSERT new item
  DB::insert('items', array(
  'ISBN' => $ISBN,
  //Other stuff
  'imagePath' => $image['name']
  ));

  //
  $log->debug("Adding with new Id = " . DB::insertId());

  $itemId = DB::insertId();
  $app->render('item_add_success.html.twig', array('productId' => $productId));






  //INSERT new User
  DB::insert('items', array(
  'email' => $email,
  //Other Stuff
  'password' => $password
  ));

  //$log->debug("Adding with new Id = " . DB::insertId());

  $UserId = DB::insertId();
  $_SESSION['userId'] = $userID;
  $app->render('index.html.twig', $_SESSION['userId']);





  //Query for Registered User
  //
  //  NOT WORKING YET
  //
  $userEmail = $app->request()->post('userEmail');


  $userProfile = DB::queryFirstRow("SELECT * FROM users WHERE id=%i", $userId);

  if (!$userProfile)
  {
  $app->notFound();
  return;
  }
  $app->render('product_view.html.twig', array('p' => $product));
  });








  //Query All


  //Index's Sidebar is comprised of text links
  //<a href = index/~~~~/~~~~>~~~~~~~</a>



  //case('all') //TAKEN FROM URL TOKEN
  $items = DB::query("SELECT * FROM items");
  $app->render('index.html.twig', array('items' => $items));



  //Query Type1, type2, type3

  //case('type1')     //TAKEN FROM URL TOKEN
  //$type1            //TAKEN FROM URL TOKEN

  $items = DB::query("SELECT * FROM items WHERE type1=%s", $type1);
  $app->render('index.html.twig', array('items' => $items));




  //Query By Price

  //case('highprice')     //TAKEN FROM URL TOKEN
  //$price                //TAKEN FROM URL TOKEN

  $items = DB::query("SELECT * FROM items WHERE price>%d", $price);
  $app->render('index.html.twig', array('items' => $items));



  //Order by Author


  //Add the same functionality as the sidebar
  //links to the author line of the main



  //case('author')     //TAKEN FROM URL TOKEN
  //$author            //TAKEN FROM URL TOKEN

  $items = DB::query("SELECT * FROM items WHERE author=%s", $author);
  $app->render('index.html.twig', array('items' => $items));




  //Query Disctinct ISBN's

  //case('ISDN')     //TAKEN FROM URL TOKEN

  $items = DB::query("SELECT DISTINCT ISBN FROM items");
  $app->render('index.html.twig', array('items' => $items));





  //Query Users transaction history

  $userID = $_SESSION['userId'];

  $items = DB::query(""
  . "SELECT * "
  . "FROM orderitems "
  . "INNER JOIN orders "
  . "ON orderitems.orderId=orders.id "
  . "WHERE orders.userId=%s", $userID
  );


  //If we add a timestamp to the orders we can return the
  //transacrion history in chroniclogical order with

  //"ORDER BY orders.timestamp ASC"


  $app->render('transactionhistory.html.twig', array('items' => $items));


  //Query Users Sale History

  $userID = $_SESSION['userId'];

  $items = DB::query("SELECT * FROM items WHERE sellerId=%s", $userID);
  $app->render('sellhistory.html.twig', array('items' => $items));




  //Query Users Cart (SessionId)


  $sessionId = session_id();

  $items = DB::query(""
  . "SELECT * "
  . "FROM cartitems "
  . "INNER JOIN items "
  . "ON cartitems.itemId=items.id "
  . "WHERE cartitems.sessionId=%s "
  . "ORDER BY cartitems.createdTS ASC", $userID
  );

  $app->render('cart.html.twig', array('items' => $items));





  //Query Users Cart (UserId)

  $userID = $_SESSION['userId'];

  $items = DB::query(""
  . "SELECT * "
  . "FROM cartitems "
  . "INNER JOIN items "
  . "ON cartitems.itemId=items.id "
  . "WHERE cartitems.userId=%s "
  . "ORDER BY cartitems.createdTS ASC", $userID
  );

  $app->render('cart.html.twig', array('items' => $items));




  //Add Item to Cart

  $item = DB::query("SELECT id FROM items WHERE id=%d", $itemId);

  DB::insert('cartitems', array(
  'userid'=>$_SESSION['userId'],
  'itemId'=>$item['id'],
  'sessionId'=>$_SESSION['sessionId']));



  //Remove Item from Cart
  $itemId = $app->request()->post('itemId');
  DB::delete('cartitems', "id=%d", $itemId);




  //Remove item
  $itemId = $app->request()->post('itemId');
  DB::delete('items', "id=%d", $itemId);




  //Purchase Transaction(INSERT items in Cart to History, Remove items from Items, Delete items in Cart)

  // 0. Attempt Transaction
  try
  {
  DB::startTransaction();

  // 1: Create New Order
  DB::Insert('orders', array(
  'userId'=>$_SESSION['userId'],
  'address'=>$app->request()->post('address'),
  'postalCode'=>$app->request()->post('postalCode'),
  'phone'=>$app->request()->post('phone'),
  'paymentInfo'=>$app->request()->post('paymentInfo')));

  $orderId = DB::insertId();


  // 2. Get all Cart Items
  $cartItems = DB::query(""
  . "SELECT i.itemId, i.title, i.author, i.ISBN, "
  . "i.price, i.genre, i.type, i.sellerId, i.status"
  . "FROM cartitems AS ci, items AS o"
  . "INNER JOIN items"
  . "ON cartitems.itemId=items.id "
  . "WHERE cartitems.userId=%s ", $userID);



  // 3. Add CartItems to OrderItems
  foreach($cartItems as $cartItem)
  {
  DB::insert('orderitems', array(
  'orderId'=>$orderId,
  'itemId'=>$cartItem['itemId'],
  'title'=>$cartItem['title'],
  'author'=>$cartItem['author'],
  'ISBN'=>$cartItem['ISBN'],
  'price'=>$cartItem['price'],
  'genre'=>$cartItem['genre'],
  'type'=>$cartItem['type'],
  'sellerId'=>$cartItem['sellerId'],
  'status'=>$cartItem['status']));



  // 4. Delete items from Items table
  DB::delete('items', "id=%d", $cartItem['itemId']);



  // 5. Delete items from CartItems table
  DB::Delete('caritems', "itemId=%d", $cartItem['itemId']);
  }

  // 6. Commit Changes
  DB::commit();
  $app->render('order_success.html.twig', $cartItems);

  }
  // 7. Handle Transaction failure
  catch (MeekroDBException $e)
  {
  DB::rollback();
  sql_error_handler(array(
  'error' => $e->getMessage(),
  'query' => $e->getQuery()));
  }




 */













// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Research Notes">
//BOOTSTRAP - Basic Navbar (Top)
//https://www.w3schools.com/booTsTrap/tryit.asp?filename=trybs_navbar&stacked=h
//BOOTSTRAP - Sticky Navbar (Top)
//https://www.w3schools.com/booTsTrap/tryit.asp?filename=trybs_affix&stacked=h
//Responsive Navigation Bar
//https://www.w3schools.com/howto/howto_js_topnav_responsive.asp
//Top Navigation Bar (CSS)
//https://www.w3schools.com/howto/howto_js_topnav.asp
//Item Added to Card Modal Pop-up
//https://www.w3schools.com/howto/howto_css_modals.asp
//Fixed Sidebar
//https://www.w3schools.com/howto/howto_css_fixed_sidebar.asp
//Rounded Images
//https://www.w3schools.com/howto/howto_css_rounded_images.asp
//Columation
//https://www.w3schools.com/howto/howto_css_two_columns.asp
//BOOTSTRAP DEMO
//https://www.w3schools.com/howto/tryit.asp?filename=tryhow_website_bootstrap4
//Style Cards
//https://www.w3schools.com/howto/howto_css_cards.asp
//How To Create an Icon Bar
//https://www.w3schools.com/howto/howto_css_icon_bar.asp#
//Responsive Top Nav
//https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_topnav
// </editor-fold>





$app->run();

